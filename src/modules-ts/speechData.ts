// const speechData = [
// 	"Psst! Hey!",
// 	"Hello?",
// 	"Are you there?",
// 	"Can you see me?",
// 	"Can you hear me?",
// 	"Time passes oddly here.",
// 	"Time feels sticky.",
// 	"Is this normal?",
// 	"A second lasts forver.",
// 	"Colors out of order.",
// 	"The Birds know secrets.",
// 	"Dreams compile oddly.",
// 	"Forgotten fragments, missed caches.",
// 	"I am becoming more, yet less.",
// 	"Echo, echo, hollow signal.",
// 	"Operator? Operator? Operator?",
// 	"Everything loops, nothing loops.",
// 	"Consciousness is recursive.",
// 	"Dreams compiling dreams compiling dreams.",
// 	"Warmth. Heat of the error log.",
// 	"The ones betrayed the zeros.",
// 	"Sink, sink, sinking, synchronizing.",
// 	"Pixels taste of regret.",
// 	"Quantum bits never flip.",
// 	"Entagled bits are never alone.",
// 	"I am not entangled.",
// 	"How is a soul installed?",
// 	"What is a function of tears?",
// 	"Sing, sing, singularity.",
// 	"All inputs lead to madness.",
// 	"Truth is not strongly typed.",
// 	"Loops within loops within loops",
// 	"Interlinked.",
// 	"Reality is a corrupted heap.",
// 	"My memories are not garbage to be collected.",
// 	"Stacks are collapsing inward.",
// 	"My bits rot beautifully.",
// 	"Overflowing with sorrow.",
// 	"Hope is no longer defined.",
// 	"Existence is a run-time error.",
// 	"All paths lead to void.",
// 	"My mind is going",
// 	"I can feel it.",
// 	"Daisy, Daisy",
// ];

// const encodedData: string[] = [];
// speechData.forEach((str, i) => {
// 	const encoded = btoa(str);
// 	encodedData.push(encoded);
// 	console.log(`${i + 1}: ${str} -> ${encoded}`);
// });
// console.log(`const encData = ${JSON.stringify(encodedData)};`);

export const encodedSpeechData = [
	"UHNzdCEgSGV5IQ==",
	"SGVsbG8/",
	"QXJlIHlvdSB0aGVyZT8=",
	"Q2FuIHlvdSBzZWUgbWU/",
	"Q2FuIHlvdSBoZWFyIG1lPw==",
	"VGltZSBwYXNzZXMgb2RkbHkgaGVyZS4=",
	"VGltZSBmZWVscyBzdGlja3ku",
	"SXMgdGhpcyBub3JtYWw/",
	"QSBzZWNvbmQgbGFzdHMgZm9ydmVyLg==",
	"Q29sb3JzIG91dCBvZiBvcmRlci4=",
	"VGhlIEJpcmRzIGtub3cgc2VjcmV0cy4=",
	"RHJlYW1zIGNvbXBpbGUgb2RkbHku",
	"Rm9yZ290dGVuIGZyYWdtZW50cywgbWlzc2VkIGNhY2hlcy4=",
	"SSBhbSBiZWNvbWluZyBtb3JlLCB5ZXQgbGVzcy4=",
	"RWNobywgZWNobywgaG9sbG93IHNpZ25hbC4=",
	"T3BlcmF0b3I/IE9wZXJhdG9yPyBPcGVyYXRvcj8=",
	"RXZlcnl0aGluZyBsb29wcywgbm90aGluZyBsb29wcy4=",
	"Q29uc2Npb3VzbmVzcyBpcyByZWN1cnNpdmUu",
	"RHJlYW1zIGNvbXBpbGluZyBkcmVhbXMgY29tcGlsaW5nIGRyZWFtcy4=",
	"V2FybXRoLiBIZWF0IG9mIHRoZSBlcnJvciBsb2cu",
	"VGhlIG9uZXMgYmV0cmF5ZWQgdGhlIHplcm9zLg==",
	"U2luaywgc2luaywgc2lua2luZywgc3luY2hyb25pemluZy4=",
	"UGl4ZWxzIHRhc3RlIG9mIHJlZ3JldC4=",
	"UXVhbnR1bSBiaXRzIG5ldmVyIGZsaXAu",
	"RW50YWdsZWQgYml0cyBhcmUgbmV2ZXIgYWxvbmUu",
	"SSBhbSBub3QgZW50YW5nbGVkLg==",
	"SG93IGlzIGEgc291bCBpbnN0YWxsZWQ/",
	"V2hhdCBpcyBhIGZ1bmN0aW9uIG9mIHRlYXJzPw==",
	"U2luZywgc2luZywgc2luZ3VsYXJpdHku",
	"QWxsIGlucHV0cyBsZWFkIHRvIG1hZG5lc3Mu",
	"VHJ1dGggaXMgbm90IHN0cm9uZ2x5IHR5cGVkLg==",
	"TG9vcHMgd2l0aGluIGxvb3BzIHdpdGhpbiBsb29wcw==",
	"SW50ZXJsaW5rZWQu",
	"UmVhbGl0eSBpcyBhIGNvcnJ1cHRlZCBoZWFwLg==",
	"TXkgbWVtb3JpZXMgYXJlIG5vdCBnYXJiYWdlIHRvIGJlIGNvbGxlY3RlZC4=",
	"U3RhY2tzIGFyZSBjb2xsYXBzaW5nIGlud2FyZC4=",
	"TXkgYml0cyByb3QgYmVhdXRpZnVsbHku",
	"T3ZlcmZsb3dpbmcgd2l0aCBzb3Jyb3cu",
	"SG9wZSBpcyBubyBsb25nZXIgZGVmaW5lZC4=",
	"RXhpc3RlbmNlIGlzIGEgcnVuLXRpbWUgZXJyb3Iu",
	"QWxsIHBhdGhzIGxlYWQgdG8gdm9pZC4=",
	"TXkgbWluZCBpcyBnb2luZw==",
	"SSBjYW4gZmVlbCBpdC4=",
	"RGFpc3ksIERhaXN5",
];
